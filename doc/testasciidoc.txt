AsciiDoc Tests
==============

WARNING: 'testasciidoc' is experimental and is alpha quality. It's in
the AsciiDoc trunk.

I very nearly made a couple of serious regression bloppers with the
last release and it's well past the point where my ad hoc checking
just doesn't cut it.

AsciiDoc requires a regression conformance test (process test input
and compare with expected output) along with an easily modified and
extensible set of test cases.

I added a rather lame doctest feature to 8.4.1 but it's just too
fiddley and inflexible. Using the Python `unittest` module would also
be tedious for large numbers of test cases so I wrote a
`testasciidoc.py` script.

- Run `python testasciidoc.py` to view the command usage.
- Run `python testasciidoc.py list` to list tests.
- Run `python testasciidoc.py update` to regenerate test data.
- Run `python testasciidoc.py run` to run tests.

Currently 'testasciidoc' has the following commands:

'list'::
  List test numbers and titles.

'run'::
  Read a and execute tests from a test configuration file. A test
  specifies an AsciiDoc source file and command options.  When the
  test is run the generated output is compared to the expected output
  and any differences displayed as a diff.  You can run a single test
  by specifying the test number and/or backend after the `run`
  command. Examples:

  python testasciidoc.py run
  python testasciidoc.py run 3
  python testasciidoc.py run html4
  python testasciidoc.py run 3 html4

'update'::
  Generates and updates missing and out of date test output data files, this
  eliminates one of the most time consuming aspect of test management.
  Use the `--force` option to force updates.  Examples:

  python testasciidoc.py update
  python testasciidoc.py --force update 4

The tests configuration file format consists of test specs separated
by a line of one or more percent characters. Each test spec consists
of an optional title and description followed by one or more
directives (a directive starts with a percent character) and are
formatted like:

-------------------------------------------------------
Optional test title
Optional test description...

% options
Optional list of command-line option tuples.

% attributes
Optional dictionary of attribute values.

% asciidoc
AsciiDoc source file name.

% backends
Optional list of backends (default is all backends).
-------------------------------------------------------

An optional 'globals' directive can precede all test specs, the
directive data is a Python dictionary containing global values.
Currently the only global is 'datadir', the directory containing
expected output files (defaults to configuration file directory). For
example:

-------------------------------------------------------
% globals
{'datadir': 'data'}
-------------------------------------------------------

Expected output test data files are stored in the 'datadir' and are
named after the corresponding 'asciidoc' directive input source file.
For example if the AsciiDoc file name is `article.txt` then the
corresponding backend output files will be `article-html4.html`,
`article-xhtml11.html`, `article-docbook.xml` (located in the
'datadir' directory).

.Notes
- Tests can be disabled by prefixing the test title with an
  exclaimation '!' character.
- All relative file names are relative to the configuration file
  directory.
- Multiple tests must by separated by a `%` separator line (one or
  more percent characters).
- Lines starting with a percent character specify a test 'directive'
  and may be followed by zero or more lines of directive data.
- Directive data lines cannot start with a percent or a hash
  character.
- Lines starting with a `#` hash character are ignored.
- The 'asciidoc' directive is mandatory and must be followed by a file
  name.
- 'options' directive data is a list of Python `(name,value)` tuples
  specifying AsciiDoc command-line options.  A string item is
  equivalent to a `(name,None)` tuple.
- The 'attributes' directive data specifies a Python dictionary for
  AsciiDoc attributes to be passed to AsciiDoc.
- The 'backends' directive data is a Python list of backend strings.
  If this directive is ommitted it defaults to all backends.

See `./tests/testasciidoc.conf` for examples.
